const IDB_DB='restaurantDb',IDB_OBJ='restaurantObj';class DBHelper{static get DATABASE_URL(){return`http://localhost:${1337}/restaurants`}static get dbPromise(){return navigator.serviceWorker?idb.open('restaurants',1,function(a){a.createObjectStore('all-restaurants',{keyPath:'id'}),a.createObjectStore('all-reviews',{keyPath:'id'}),a.createObjectStore('offline-reviews',{keyPath:'updatedAt'})}):Promise.resolve()}static fetchRestaurants(a){DBHelper.dbPromise.then(b=>{if(b){const c=b.transaction('all-restaurants'),d=c.objectStore('all-restaurants');d.getAll().then(e=>{0===e.length?fetch(`http://localhost:1337/restaurants`).then(f=>{return f.json()}).then(f=>{const g=b.transaction('all-restaurants','readwrite'),h=g.objectStore('all-restaurants');f.forEach(j=>{h.put(j)}),a(null,f)}).catch(f=>{a(f,null)}):a(null,e)})}})}static fetchRestaurantById(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.find(f=>f.id==a);e?b(null,e):b('Restaurant does not exist',null)}})}static fetchRestaurantByCuisine(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.filter(f=>f.cuisine_type==a);b(null,e)}})}static fetchRestaurantByNeighborhood(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.filter(f=>f.neighborhood==a);b(null,e)}})}static fetchRestaurantByCuisineAndNeighborhood(a,b,c){DBHelper.fetchRestaurants((d,e)=>{if(d)c(d,null);else{let f=e;'all'!=a&&(f=f.filter(g=>g.cuisine_type==a)),'all'!=b&&(f=f.filter(g=>g.neighborhood==b)),c(null,f)}})}static fetchNeighborhoods(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{const d=c.map((f,g)=>c[g].neighborhood),e=d.filter((f,g)=>d.indexOf(f)==g);a(null,e)}})}static fetchCuisines(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{const d=c.map((f,g)=>c[g].cuisine_type),e=d.filter((f,g)=>d.indexOf(f)==g);a(null,e)}})}static fetchRestaurantReviews(a,b){DBHelper.dbPromise.then(c=>{if(c){const d=c.transaction('all-reviews'),e=d.objectStore('all-reviews');e.getAll().then(f=>{f&&0<f.length?b(null,f):fetch(`${DBHelper.DATABASE_URL}/reviews/?restaurant_id=${a.id}`).then(g=>{return g.json()}).then(g=>{this.dbPromise.then(h=>{if(h){const j=h.transaction('all-reviews','readwrite'),k=j.objectStore('all-reviews');g.forEach(l=>{k.put(l)})}}),b(null,g)}).catch(g=>{b(g,null)})})}})}static urlForRestaurant(a){return`./restaurant.html?id=${a.id}`}static imageUrlForRestaurant(a){return`/img/${a.photograph}.webp`}static mapMarkerForRestaurant(a,b){const c=new google.maps.Marker({position:a.latlng,title:a.name,url:DBHelper.urlForRestaurant(a),map:b,animation:google.maps.Animation.DROP});return c}static startServiceWorker(){'serviceWorker'in navigator&&navigator.serviceWorker.register('sw.js').then(a=>{console.log('Yeah, we made it!. Scope is '+a.scope)}).catch(a=>{console.log('Oh no, we are f..ked, registration failed with '+a)})}static submitReview(a){return console.log(a),fetch(`http://localhost:1337/reviews`,{body:JSON.stringify(a),cache:'no-cache',credentials:'same-origin',headers:{'content-type':'application/json'},method:'POST',mode:'cors',redirect:'follow',referrer:'no-referrer'}).then(b=>{b.json().then(c=>{return this.dbPromise.then(d=>{if(d){const e=d.transaction('all-reviews','readwrite'),f=e.objectStore('all-reviews');f.put(c)}}),c})}).catch(()=>{return a.updatedAt=new Date().getTime(),console.log(a),void this.dbPromise.then(c=>{if(c){const d=c.transaction('offline-reviews','readwrite'),e=d.objectStore('offline-reviews');e.put(a),console.log('Review stored offline in IDB')}})})}static submitOfflineReviews(){DBHelper.dbPromise.then(a=>{if(a){const b=a.transaction('offline-reviews'),c=b.objectStore('offline-reviews');c.getAll().then(d=>{console.log(d),d.forEach(e=>{DBHelper.submitReview(e)}),DBHelper.clearOfflineReviews()})}})}static clearOfflineReviews(){DBHelper.dbPromise.then(a=>{const b=a.transaction('offline-reviews','readwrite'),c=b.objectStore('offline-reviews').clear()})}static toggleFavorite(a,b){fetch(`${DBHelper.DATABASE_URL}/restaurants/${a.id}/?is_favorite=${b}`,{method:'PUT'}).then(c=>{return c.json()}).then(c=>{return DBHelper.dbPromise.then(d=>{if(d){const e=d.transaction('all-restaurants','readwrite'),f=e.objectStore('all-restaurants');f.put(c)}}),c}).catch(()=>{a.is_favorite=b,DBHelper.dbPromise.then(d=>{if(d){const e=d.transaction('all-restaurants','readwrite'),f=e.objectStore('all-restaurants');f.put(a)}}).catch(d=>{console.log(d)})})}}